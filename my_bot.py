import telebot
import psycopg2
import keyboards as kb

bot = telebot.TeleBot('1220511535:AAEuCC_x7AH_2pNIlxxIrAdkWirdRIZQ_GQ')

conn = psycopg2.connect(dbname='schedule', user='postgres', password='pass', host='localhost')
cursor = conn.cursor()
gr = ""
myFaculty = ""
id_facul = 0
state_menu = []


def check_menu(main_menu=False, faculty_menu=False, group_menu=False, day_menu=False, search_menu=False, teacher_menu=False):
    global state_menu
    state_menu = [main_menu, faculty_menu, group_menu, day_menu, search_menu, teacher_menu]


check_menu(main_menu=True)


@bot.message_handler(func=lambda message: 'Back' == message.text, content_types=['text'])
def handle_text(message):
    global state_menu
    if state_menu[0]:
        bot.send_message(message.chat.id,
                         "–í–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–µ–∫—É–¥–∞, —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥!")
    elif state_menu[1] or state_menu[4] or state_menu[5]:
        check_menu(main_menu=True)
        message.text = '/start'
        welcome(message)
    elif state_menu[2]:
        message.text = 'üé≤ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç'
        check_menu(faculty_menu=True)
        menu_faculty(message)
    elif state_menu[3]:
        message.text = myFaculty
        check_menu(group_menu=True)
        menu_group(message)


@bot.message_handler(commands=['start'])
def welcome(message):
    # keyboard
    resp = [("üé≤ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",), ("–ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",), ("üòä –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",)]
    # resp.append()
    # resp.append()
    kb.view_keyboard(bot, message, resp, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}! –Ø - –±–æ—Ç <b>{1.first_name}</b>.\n "
                                         "–ë–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç—ã, –º–æ–π –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤ –∫—É—Ä—Å–µ "
                                         "—Å–≤–æ–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!")


@bot.message_handler(func=lambda message: state_menu[0], content_types=['text'])
def menu_faculty(message):
    global state_menu
    if message.chat.type == 'private':
        if message.text == 'üé≤ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç':
            # keyboard
            check_menu(faculty_menu=True)
            cursor.execute("select faculty from faculty")
            resp_faculty = cursor.fetchall()
            kb.view_keyboard(bot, message, resp_faculty, "{0.first_name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç!")
        elif message.text == 'üòä –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
            bot.send_message(message.chat.id,
                             "–ï—Å–ª–∏ —Ç—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞ –∏–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å "
                             "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –≤–æ—Ç –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å - @mitsukanov.\n –ù–∞–ø–∏—à–∏ –µ–º—É!")
        elif message.text == '–ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è':
            hide_markup = telebot.types.ReplyKeyboardRemove()
            bot.send_message(message.chat.id,
                             "{0.first_name}, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–ª–∏ –µ–µ —á–∞—Å—Ç—å, –∏ –Ω–∞–∂–º–∏—Ç–µ –≤–≤–æ–¥! –†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.".format(
                                 message.from_user, bot.get_me()),
                             parse_mode='html', reply_markup=hide_markup)
            check_menu(search_menu=True)
        else:
            bot.send_message(message.chat.id, "–ù–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")


@bot.message_handler(func=lambda message: state_menu[1], content_types=['text'])
def menu_group(message):
    global state_menu, myFaculty, id_facul
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
    cursor.execute("select * from faculty where faculty = %s", (message.text,))
    resp = cursor.fetchall()
    if resp:
        id_facul = resp[0][0]
        myFaculty = resp[0][1]
        cursor.execute("select group_name from groupa where id_faculty = %s", (id_facul,))
        resp_group = cursor.fetchall()
        kb.view_keyboard(bot, message, resp_group, "{0.first_name}, –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É!")
        check_menu(group_menu=True)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç!")


@bot.message_handler(func=lambda message: state_menu[2], content_types=['text'])
def menu_day(message):
    global gr, id_facul
    global state_menu
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞
    cursor.execute("select * from groupa where group_name = %s and id_faculty = %s", (message.text, id_facul,))
    resp = cursor.fetchall()
    if resp:
        gr = resp[0][1]
        cursor.execute("select dayofweek from dayofweek")
        resp_day = cursor.fetchall()
        kb.view_keyboard(bot, message, resp_day, "{0.first_name}, –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
        check_menu(day_menu=True)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–µ –∏–∑ —Ç–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞!")


@bot.message_handler(func=lambda message: state_menu[3], content_types=['text'])
def last_day(message):
    cursor.execute("select dayofweek from dayofweek where dayofweek = %s", (message.text,))
    resp = cursor.fetchall()
    if resp:
        day = resp[0][0]
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å.
        cursor.execute("select hours, name_disc, fio, number, corpus "
                       "from bell, disc, teachers, audit, groupa, dayofweek, corpus, raspisanie "
                       "where raspisanie.id_group = groupa.id and raspisanie.id_dow = dayofweek.id and "
                       "raspisanie.id_time = bell.id and raspisanie.id_disc = disc.id and "
                       "corpus.id = audit.id_corpus and "
                       "raspisanie.id_teacher = teachers.id and raspisanie.id_audit = audit.id and "
                       "group_name = %s and dayofweek = %s", (gr, day,))
        resp = cursor.fetchall()
        if resp:
            result = ""
            for r in resp:
                result += ("\n{0} \n –∞—É–¥. {3}, –∫–æ–ø—Ä. {4}\n{2}\n{1}\n".format(r[0], r[1], r[2], r[3], r[4]))
            bot.send_message(message.chat.id, result)
        else:
            bot.send_message(message.chat.id, "–ü–∞—Ä –Ω–µ—Ç! –ì—É–ª—è–µ–º! –¢—ã—Ü-—Ç—ã—Ü!")
    else:
        bot.send_message(message.chat.id, "–ù–µ –≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å!")


@bot.message_handler(func=lambda message: state_menu[4], content_types=['text'])
def menu_teacher(message):
    cursor.execute("select fio from teachers "
                   "where fio like '%{}%'".format(message.text))
    resp_teacher = cursor.fetchall()
    if resp_teacher:
        kb.view_keyboard(bot, message, resp_teacher, "{0.first_name}, –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è!")
        check_menu(teacher_menu=True)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –§–ò–û!")


@bot.message_handler(func=lambda message: state_menu[5], content_types=['text'])
def last_menu_teacher(message):
    cursor.execute("select fio from teachers where fio = %s", (message.text,))
    resp = cursor.fetchall()
    if resp:
        fio = resp[0][0]
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å.
        cursor.execute("select dayofweek, hours, group_name, name_disc, number, corpus "
                       "from bell, disc, teachers, audit, groupa, dayofweek, corpus, raspisanie "
                       "where raspisanie.id_group = groupa.id and raspisanie.id_dow = dayofweek.id and "
                       "raspisanie.id_time = bell.id and raspisanie.id_disc = disc.id and "
                       "corpus.id = audit.id_corpus and "
                       "raspisanie.id_teacher = teachers.id and raspisanie.id_audit = audit.id and "
                       "fio = %s", (fio,))
        resp_rasp = cursor.fetchall()
        if resp_rasp:
            result = ""
            for r in resp_rasp:
                result += ("\n{0} \n{1} \n{2} \n{3} \n–∞—É–¥. {4}, –∫–æ–ø—Ä. {5}\n".format(r[0],
                                                                                     r[1], r[2], r[3], r[4], r[5]))
            bot.send_message(message.chat.id, result)
        else:
            bot.send_message(message.chat.id, "–ê –º–æ–∂–µ—Ç —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç–ø—É—Å–∫?")
    else:
        bot.send_message(message.chat.id, "–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –§–ò–û!")


    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
    # cursor.close()
    # conn.close()

# RUN
bot.polling(none_stop=True)
